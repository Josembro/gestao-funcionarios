-- ==============================================
-- ENUMS PADRÃO
-- ==============================================
DO $$ BEGIN
  CREATE TYPE sexo_enum AS ENUM ('M', 'F');
EXCEPTION WHEN duplicate_object THEN null; END $$;

DO $$ BEGIN
  CREATE TYPE status_funcionario_enum AS ENUM ('ativo', 'inativo');
EXCEPTION WHEN duplicate_object THEN null; END $$;

DO $$ BEGIN
  CREATE TYPE cargo_tipo_enum AS ENUM ('efetivo', 'comissao_servico', 'probatorio');
EXCEPTION WHEN duplicate_object THEN null; END $$;

DO $$ BEGIN
  CREATE TYPE solicitacao_status_enum AS ENUM ('enviada', 'em_analise', 'pendente', 'aprovado', 'rejeitado');
EXCEPTION WHEN duplicate_object THEN null; END $$;

DO $$ BEGIN
  CREATE TYPE role_enum AS ENUM ('admin', 'diretor', 'rh', 'funcionario');
EXCEPTION WHEN duplicate_object THEN null; END $$;

-- ==============================================
-- EXTENSÕES
-- ==============================================
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- ==============================================
-- TABELAS DE REFERÊNCIA
-- ==============================================
CREATE TABLE IF NOT EXISTS regime_juridico (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  nome VARCHAR(50) NOT NULL UNIQUE,
  descricao TEXT
);

CREATE TABLE IF NOT EXISTS estado_funcional (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  nome VARCHAR(50) NOT NULL UNIQUE,
  descricao TEXT
);

CREATE TABLE IF NOT EXISTS departamento (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  nome VARCHAR(100) NOT NULL UNIQUE,
  descricao TEXT,
  created_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS local_servico (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  nome VARCHAR(150) NOT NULL UNIQUE,
  comuna VARCHAR(100),
  municipio VARCHAR(100),
  provincia VARCHAR(100),
  data_criacao DATE,
  decreto_criacao VARCHAR(150),
  descricao TEXT,
  created_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS tipo_servico (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  nome VARCHAR(255) NOT NULL,
  descricao TEXT
);

-- ==============================================
-- CARGOS, CATEGORIAS E GRAUS
-- ==============================================
CREATE TABLE IF NOT EXISTS categoria (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  cargo_tipo cargo_tipo_enum NOT NULL,
  nome TEXT NOT NULL,
  descricao TEXT,
  UNIQUE (cargo_tipo, nome)
);

CREATE TABLE IF NOT EXISTS grau (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  categoria_id uuid NOT NULL REFERENCES categoria(id) ON DELETE CASCADE,
  nome TEXT NOT NULL,
  salario_base NUMERIC(14,2) NOT NULL
);

CREATE TABLE IF NOT EXISTS cargo (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  nome VARCHAR(100) NOT NULL,
  nivel_hierarquico INTEGER,
  descricao TEXT,
  created_at TIMESTAMP DEFAULT now(),
  quantidade INTEGER DEFAULT 0,
  cargo_tipo cargo_tipo_enum,
  categoria_id uuid REFERENCES categoria(id) ON DELETE SET NULL,
  grau_id uuid REFERENCES grau(id) ON DELETE SET NULL
);

-- ==============================================
-- FUNCIONÁRIO
-- ==============================================
CREATE TABLE IF NOT EXISTS funcionario (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  nome_completo VARCHAR(150) NOT NULL,
  nome_pai VARCHAR(150),
  nome_mae VARCHAR(150),
  sexo sexo_enum,
  estado_civil VARCHAR(20),
  data_nascimento DATE,
  naturalidade_comuna VARCHAR(100),
  naturalidade_municipio VARCHAR(100),
  naturalidade_provincia VARCHAR(100),
  nacionalidade VARCHAR(50),
  email VARCHAR(150) UNIQUE,
  senha TEXT,
  telefone VARCHAR(20),
  morada TEXT,
  bi_numero VARCHAR(30) UNIQUE,
  bi_emissao DATE,
  bi_validade DATE,
  nif VARCHAR(30),
  data_admissao DATE,
  status status_funcionario_enum DEFAULT 'ativo',
  departamento_id uuid REFERENCES departamento(id),
  cargo_id uuid REFERENCES cargo(id),
  local_servico_id uuid REFERENCES local_servico(id),
  created_at TIMESTAMP DEFAULT now(),
  numero_agente VARCHAR(30) NOT NULL UNIQUE,
  numero_inss VARCHAR(30) UNIQUE,
  regime_id uuid REFERENCES regime_juridico(id),
  estado_id uuid REFERENCES estado_funcional(id),
  data_inicio_probatorio DATE,
  data_fim_probatorio DATE
);

-- ==============================================
-- USUÁRIO
-- ==============================================
CREATE TABLE IF NOT EXISTS usuario (
  auth_id uuid PRIMARY KEY,
  funcionario_id uuid NOT NULL UNIQUE REFERENCES funcionario(id) ON DELETE CASCADE,
  username VARCHAR(50) NOT NULL UNIQUE,
  role role_enum NOT NULL,
  ativo BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

-- ==============================================
-- TRIGGER DE VERIFICAÇÃO DO AUTH_ID
-- ==============================================
CREATE OR REPLACE FUNCTION verificar_usuario_authid_existe()
RETURNS TRIGGER AS $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE id = NEW.auth_id) THEN
    RAISE EXCEPTION 'auth_id % não existe em auth.users', NEW.auth_id;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tg_verificar_usuario_authid
BEFORE INSERT OR UPDATE ON usuario
FOR EACH ROW
EXECUTE FUNCTION verificar_usuario_authid_existe();

-- ==============================================
-- FUNÇÃO DE LOGIN
-- ==============================================
CREATE OR REPLACE FUNCTION login_funcionario(p_email TEXT, p_senha TEXT)
RETURNS TABLE(id uuid, nome_completo TEXT, role role_enum) AS $$
BEGIN
  RETURN QUERY
  SELECT f.id, f.nome_completo, u.role
  FROM funcionario f
  JOIN usuario u ON u.funcionario_id = f.id
  WHERE f.email = p_email
    AND f.senha = crypt(p_senha, f.senha)
    AND u.ativo = TRUE;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ==============================================
-- ESCOLARIDADE, DOCUMENTOS, ETC.
-- ==============================================
CREATE TABLE IF NOT EXISTS escolaridade (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  funcionario_id uuid NOT NULL REFERENCES funcionario(id) ON DELETE CASCADE,
  nivel VARCHAR(50),
  curso VARCHAR(100),
  instituicao VARCHAR(100),
  data_inicio DATE,
  data_conclusao DATE,
  created_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS documento (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  funcionario_id uuid NOT NULL REFERENCES funcionario(id) ON DELETE CASCADE,
  tipo VARCHAR(50),
  numero VARCHAR(50),
  data_emissao DATE,
  data_validade DATE,
  observacoes TEXT,
  created_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS ferias (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  funcionario_id uuid NOT NULL REFERENCES funcionario(id) ON DELETE CASCADE,
  ano INTEGER,
  data_inicio DATE,
  data_fim DATE,
  observacoes TEXT,
  created_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS direcao_chefia (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  funcionario_id uuid NOT NULL REFERENCES funcionario(id) ON DELETE CASCADE,
  nome VARCHAR(100) NOT NULL,
  inicio_vigencia DATE NOT NULL,
  fim_vigencia DATE,
  observacoes TEXT
);

CREATE TABLE IF NOT EXISTS funcionario_funcao (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  funcionario_id uuid NOT NULL REFERENCES funcionario(id) ON DELETE CASCADE,
  direcao_chefia_id uuid NOT NULL REFERENCES direcao_chefia(id) ON DELETE CASCADE,
  data_inicio TIMESTAMPTZ DEFAULT now(),
  data_fim TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS salario (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  funcionario_id uuid NOT NULL REFERENCES funcionario(id) ON DELETE CASCADE,
  data_pagamento DATE,
  valor_bruto NUMERIC(12,2),
  descontos NUMERIC(12,2),
  valor_liquido NUMERIC(12,2),
  observacoes TEXT,
  created_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS solicitacao (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  funcionario_id uuid NOT NULL REFERENCES funcionario(id) ON DELETE CASCADE,
  tipo_id uuid NOT NULL REFERENCES tipo_servico(id),
  descricao TEXT,
  status solicitacao_status_enum DEFAULT 'enviada',
  criada_em TIMESTAMPTZ DEFAULT now(),
  atualizada_em TIMESTAMPTZ DEFAULT now(),
  resolvida_em TIMESTAMPTZ
);

-- ==============================================
-- ÍNDICES
-- ==============================================
CREATE INDEX IF NOT EXISTS idx_funcionario_departamento ON funcionario(departamento_id);
CREATE INDEX IF NOT EXISTS idx_funcionario_cargo ON funcionario(cargo_id);
CREATE INDEX IF NOT EXISTS idx_funcionario_estado ON funcionario(estado_id);


Project name: gestao-funcionarios
Database Password: Josembr0.-923
Project ID: ijwkeftjvodxdrrbflyj

SUPABASE_URL=https://ijwkeftjvodxdrrbflyj.supabase.co

anonpublic: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imlqd2tlZnRqdm9keGRycmJmbHlqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI4NjYzNDUsImV4cCI6MjA2ODQ0MjM0NX0.WxEFNtAVVWuD6b7I8u6qwChVoU1Ud47qvR_VrSvq9H4

service_role: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imlqd2tlZnRqdm9keGRycmJmbHlqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Mjg2NjM0NSwiZXhwIjoyMDY4NDQyMzQ1fQ.PRoiNm-BEmFNUvUxQYRmLyz3ivkgeFO8mILAYQ69KsM

JWT_SECRET=5+LONUHnXbpSsEsbwgzA3qgychtGju3xUE8VQlKZ42b8UyaxwKH6FZMpsvlL6KLIRMouYJa6D6fEQ+t4E8lA2Q==

josembro@edu.org - testes123.
confirma@edu.org - testes123
admin@edu.org - adminteste123
geral@edu.org - geral123.

Transaction pooler: postgresql://postgres.ijwkeftjvodxdrrbflyj:Josembr0.-923@aws-0-eu-west-2.pooler.supabase.com:6543/postgres


Custo Total: 0€
Plataforma	        Finalidade	                       Custo
Supabase	          Base de dados, auth, API	         Grátis
Vercel	            Hospedagem frontend	               Grátis
GitHub	            Código-fonte	                     Grátis
Tailwind	          Estilo responsivo	                 Grátis


Gerar o dashboard do RH ou do funcionário;
Criar as primeiras rotas de registo e login;
Implementar notificações internas.

http://localhost:3000/admin/dashboard
http://localhost:3000/rh/dashboard
http://localhost:3000/funcionario/dashboard
http://localhost:3000/diretor/dashboard

 Testa manualmente os caminhos no navegador
| Tipo de Utilizador    | Caminho da Página        |
| --------------------  | -----------------------  |
| 🛡️ Admin             | `/admin/dashboard`       |
| 🧑‍💼 RH                | `/rh/dashboard`          |
| 👤 Funcionário       | `/funcionario/dashboard` |
| 🏢 Diretor Municipal | `/diretor/dashboard`     |

